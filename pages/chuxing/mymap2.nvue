<template>
	<view>
		<view class="pageMap">
			<map
			id="allmap"
			ref="allmap"
			class="mymap2"
			:latitude="latitude"
			:longitude="longitude"
			:markers="covers"
			:polyline="ployline"
			></map>
		</view>
		<button type="default" @click="handle(25.500404,119.794946)">makers</button>
		<button type="default" @click="clear()">停止定时器</button>
	</view>
</template>
<script>
	export default{
		data(){
			return{
				latitude:'',
				longitude:'',
				covers:[
					{
						id:0,
						latitude:25.4987,
						longitude:119.78,
						iconPath:'../../static/img/bus.png',
						width:40,
						height:40
					},
					{
						id:1,
						latitude:'',
						longitude:'',
						iconPath:'../../static/img/start.png',
						width:40,
						height:40
					}
				],
				ployline:[],
				startLat:'',
				startLon:'',
				endLat:25.4987,
				endLon:119.78,
				timer:'',
				socketTask: null,
				// 确保websocket是打开状态
				is_open_socket: false
			}
		},
		onLoad() {
			// this.getAround()
			this.getLocation()
			this.draway()
			
		},
		onReady() {
			this.map=uni.createMapContext("allmap",this)
		},
		methods:{
			
			// websocket连接
			connectSocketInit() {
				// 创建一个this.socketTask对象【发送、接收、关闭socket都由这个对象操作】
				this.socketTask = uni.connectSocket({
					// 【非常重要】必须确保你的服务器是成功的,如果是手机测试千万别使用ws://127.0.0.1:9099【特别容易犯的错误】
					url: "",
					success(data) {
						console.log("websocket连接成功");
					},
				});
 
				// 消息的发送和接收必须在正常连接打开中,才能发送或接收【否则会失败】
				this.socketTask.onOpen((res) => {
					console.log("WebSocket连接正常打开中...！");
					this.is_open_socket = true;
					// 注：只有连接正常打开中 ，才能正常成功发送消息
					this.socketTask.send({
						data: "uni-app发送一条消息",
						async success() {
							console.log("消息发送成功");
						},
					});
					// 注：只有连接正常打开中 ，才能正常收到消息
					this.socketTask.onMessage((res) => {
						//在这里传入经纬度给data中的move_lat,move_lon
						
						console.log("收到服务器内容：" + res.data);
					});
				})
				// 这里仅是事件监听【如果socket关闭了会执行】
				this.socketTask.onClose(() => {
					console.log("已经被关闭了")
				})
			},
			// 关闭websocket【离开这个页面的时候执行关闭】
			closeSocket() {
				this.socketTask.close({
					success(res) {
						this.is_open_socket = false;
						console.log("关闭成功", res)
					},
					fail(err) {
						console.log("关闭失败", err)
					}
				})
			},
			
			draway(){
				var that=this
				//websocket传入数据然后进行位置的追踪绘画
				that.timer=setInterval(function(){
					//通过随机生成的坐标使得小车开始每隔2秒移动
					var i = Math.round(Math.random()*9+1);
					if(i%2==0){
					   that.endLat=that.endLat+ i*0.0001
					   that.endLon=that.endLon+ i*0.0001
					   // console.log(typeof(this.endLat))
					   // return temp + i*0.0001;
					}else{
					   that.endLat=that.endLat- i*0.0001
					   that.endLon=that.endLon- i*0.0001
					   // return temp - i*0.0001;
				    }
					console.log(`endlat:${that.endLat},endlon:${that.endLon}`)
					that.handle(that.endLat,that.endLon)
				// this.$options.methods.handle()
				},2000)
			},
			getLocation(){
				var that=this;
				uni.getLocation({
					type:'gcj02',
					success: (res) => {
						console.log('success')
						that.latitude=res.latitude
						that.longitude=res.longitude
						
						that.covers[1].latitude=res.latitude
						that.covers[1].longitude=res.longitude
						// console.log(`lat:${that.covers[1].latitude},lon:${that.covers[1].longitude}`)		
					},
					fail: (err) => {
						console.log(JSON.stringify(err))
					}
				})
			},
			handle(des_lat,des_lon){
				console.log("mpove")
				this.map.translateMarker({
					markerId:0,
					destination:{
						// latitude:25.500404,
						// longitude:119.794946,
						latitude:des_lat,
						longitude:des_lon
					},
					duration:2000					
				},ret=>{
					console.log(JSON.stringify(ret))
				})
			},
			clear(){
				clearInterval(this.timer)				
			}
		}
	}
</script>
<style>

	.pageMap{
		width: 1000px;
		height: 500px;
		flex: 1;
	}
	.mymap2{
		width: 1000px;
		height: 500px;
	}
	.scrollview {
	    flex: 1;
	    padding: 10px;
	}
</style>